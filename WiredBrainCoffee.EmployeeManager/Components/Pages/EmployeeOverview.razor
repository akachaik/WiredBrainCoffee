@page "/employees/list/{CurrentPage:int?}"

@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using WiredBrainCoffee.EmployeeManager.Components.Shared
@using WiredBrainCoffee.EmployeeManager.Data
@using WiredBrainCoffee.EmployeeManager.Data.Models

@inject IDbContextFactory<EmployeeManagerDbContext> ContextFactory
@inject NavigationManager NavigationManager
@inject StateContainer StateConainer

<PageTitle>Employees</PageTitle>

<h1>Employees</h1>

@if (Employees is null)
{
    <div>Loading...</div>
}
else
{
    <ul class="pagination mt-3">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="/employees/list/@(CurrentPage - 1)">Previous</a>
        </li>
        @for (int i = 1; i <= TotalPages; i++)
        {
            <li class="page-item @(CurrentPage == i ? "active" : "")">
                <a class="page-link" href="/employees/list/@i">@i</a>
            </li>
        }
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <a class="page-link" href="/employees/list/@(CurrentPage + 1)">Next</a>
        </li>
    </ul>
    
    <table class="table table-striped table-bordered table-hover">
        <thead>
            <tr>
                <th>Firstname</th>
                <th>Lastname</th>
                <th>Is Developer</th>
                <th>Department</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in Employees)
            {
                <tr>
                    <td>@employee.FirstName</td>
                    <td>@employee.LastName</td>
                    <td>@employee.IsDeveloper</td>
                    <td>@employee.Department?.Name</td>
                    <td>
                        <a href="/employees/edit/@employee.Id" class="btn btn-outline-primary">Edit</a>
                        <button class="btn btn-outline-danger" @onclick="() => HandleDelete(employee)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {

    private const int ItemsPerPage = 5;
    
    private int TotalPages { get; set; }

    [Parameter]
    public int? CurrentPage { get; set; }

    const string EmployeeListBase = "/employees/list";

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        using var contextTask = ContextFactory.CreateDbContextAsync();
        var context = await contextTask;

        if (CurrentPage is null or < 1)
        {
            NavigationManager.NavigateTo($"{EmployeeListBase}/1");
            return;
        }

        var itemsToSkip = (CurrentPage.Value - 1) * ItemsPerPage;
        var employeesCount = await context.Employees.CountAsync();

        TotalPages = employeesCount == 0
            ? 1
            : (int)Math.Ceiling(employeesCount / (double)ItemsPerPage);

        if (CurrentPage > TotalPages)
        {
            NavigationManager.NavigateTo($"{EmployeeListBase}/{TotalPages}");
            return;
        }

        StateConainer.EmployeeOverviewPage = CurrentPage.Value;

        Employees = await context.Employees
            .Include(e => e.Department)
            .OrderBy(emp => emp.FirstName)
            .Skip(itemsToSkip)
            .Take(ItemsPerPage)
            .ToArrayAsync();
    }

    private Employee[]? Employees { get; set; }

    private async Task HandleDelete(Employee employee)
    {
        using var context = ContextFactory.CreateDbContext();

        context.Employees.Remove(employee);

        await context.SaveChangesAsync();

        await LoadData();
    }

}