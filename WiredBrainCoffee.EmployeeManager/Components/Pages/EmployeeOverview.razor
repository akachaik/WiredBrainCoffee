@page "/employees/list/{CurrentPage:int?}"

@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using WiredBrainCoffee.EmployeeManager.Data
@using WiredBrainCoffee.EmployeeManager.Data.Models

@inject IDbContextFactory<EmployeeManagerDbContext> ContextFactory
@inject NavigationManager NavigationManager

<PageTitle>Employees</PageTitle>

<h1>Employees</h1>

@if (Employees is null)
{
    <div>Loading...</div>
}
else
{
    <ul class="pagination mt-3">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="/employees/list/@(CurrentPage - 1)">Previous</a>
        </li>
        @for (int i = 1; i <= MaxPageNumber; i++)
        {
            <li class="page-item @(CurrentPage == i ? "active" : "")">
                <a class="page-link" href="/employees/list/@i">@i</a>
            </li>
        }
        <li class="page-item @(CurrentPage == MaxPageNumber ? "disabled" : "")">
            <a class="page-link" href="/employees/list/@(CurrentPage + 1)">Next</a>
        </li>
    </ul>
    
    <table class="table table-striped table-bordered table-hover">
        <thead>
        <tr>
            <th>Firstname</th>
            <th>Lastname</th>
            <th>Is Developer</th>
            <th>Depart</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var employee in Employees)
        {
            <tr>
                <td>@employee.FirstName</td>
                <td>@employee.LastName</td>
                <td>@employee.IsDeveloper</td>
                <td>@employee.Department?.Name</td>
            </tr>
        }
        </tbody>
    </table>

}

@code {

    private const int ItemsPerPage = 4;
    
    private int MaxPageNumber { get; set; }

    [Parameter]
    public int? CurrentPage { get; set; }
    
    
    protected override async Task OnParametersSetAsync()
    {
        using var contextTask = ContextFactory.CreateDbContextAsync();
        var context = await contextTask;

        if (CurrentPage is null or < 1)
        {
            NavigationManager.NavigateTo("/employees/list/1");
            return;
        }

        var itemsToSkip = (CurrentPage.Value - 1) * ItemsPerPage;
        var employeesCount = await context.Employees.CountAsync();

        MaxPageNumber = employeesCount == 0 
            ? 1 
            : (int)Math.Ceiling(employeesCount / (double)ItemsPerPage);

        if (CurrentPage > MaxPageNumber)
        {
            NavigationManager.NavigateTo($"/employees/list/{MaxPageNumber}");
            return;
        }
        
        Employees = await context.Employees
            .Include(e => e.Department)
            .OrderBy(emp => emp.FirstName)
            .Skip(itemsToSkip)
            .Take(ItemsPerPage)
            .ToArrayAsync();
    }

    private Employee[]? Employees { get; set; }
}