@page "/employees/add"
@using Microsoft.EntityFrameworkCore
@using WiredBrainCoffee.EmployeeManager.Data
@using WiredBrainCoffee.EmployeeManager.Data.Models

@inject IDbContextFactory<EmployeeManagerDbContext> ContextFactory

@rendermode InteractiveServer

<PageTitle>Add Employee</PageTitle>

<h1>Add Employee</h1>

@if (Employee is not null)
{
    <EditForm Model="@Employee" FormName="addEmployeeForm">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        
        <div class="mb-3">
            <label for="firstname" class="form-label">Firstname</label>
            <InputText id="firstname" class="form-control"
                       @bind-Value="Employee.FirstName"></InputText>
            <ValidationMessage For="() => Employee.FirstName"></ValidationMessage>
        </div>        
        
        <div class="mb-3">
            <label for="lastname" class="form-label">Lastname</label>
            <InputText id="lastname" class="form-control"
                       @bind-Value="Employee.LastName"></InputText>
            <ValidationMessage For="() => Employee.LastName"></ValidationMessage>
        </div>        

        <div class="mb-3">
            <label for="department" class="form-label">Department</label>
            <InputSelect id="department" class="form-select"
                         @bind-Value="Employee.DepartmentId">
                @if (Departments is not null)
                {
                    foreach (var department in Departments)
                    {
                        <option value="@department.Id">@department.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="() => Employee.IsDeveloper"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label for="isDeveloper" class="form-label">Is Developer:</label>
            <InputCheckbox id="isDeveloper" class="form-check-input"
                           @bind-Value="Employee.IsDeveloper"></InputCheckbox>
            <ValidationMessage For="() => Employee.IsDeveloper"></ValidationMessage>
        </div>

        <button type="submit" class="btn btn-primary mt-3">Add</button>
    </EditForm>
}

@code {

    private Employee? Employee { get; set; }
    
    private Department[]? Departments { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = ContextFactory.CreateDbContext();

        Departments = await context.Departments
            .OrderBy(dept => dept.Name)
            .ToArrayAsync();
        
        Employee = new Employee
        {
            DepartmentId = Departments.FirstOrDefault()?.Id
        };
    }

}