@page "/employees/add"
@using Microsoft.EntityFrameworkCore
@using WiredBrainCoffee.EmployeeManager.Data
@using WiredBrainCoffee.EmployeeManager.Data.Models
@using WiredBrainCoffee.EmployeeManager.Components.Shared

@inject IDbContextFactory<EmployeeManagerDbContext> ContextFactory

@rendermode InteractiveServer

<PageTitle>Add Employee</PageTitle>

<h1>Add Employee</h1>

@if (Employee is not null)
{
    <EmployeeForm Employee="@Employee"
                  Departments="@Departments"
                  IsBusy="@IsBusy"
                  OnSubmit="HandleOnSubmit"></EmployeeForm>
}
@if (HasSuccessMessage)
{
    <br/>
    <div class="alert alert-success">@SuccessMessage</div>
}

@if (HasErrorMessage)
{
    <br/>
    <div class="alert alert-danger">@ErrorMessage</div>
}

@code {

    private Employee? Employee { get; set; }
    
    private Department[]? Departments { get; set; }
    
    private bool IsBusy { get; set; }
    
    private string? SuccessMessage { get; set; }
    private bool HasSuccessMessage => !string.IsNullOrEmpty(SuccessMessage);
    
    private string? ErrorMessage { get; set; }
    private bool HasErrorMessage => !string.IsNullOrEmpty(ErrorMessage);

    protected override async Task OnInitializedAsync()
    {
        using var contextTask = ContextFactory.CreateDbContextAsync();
        var context = await contextTask;

        Departments = await context.Departments
            .OrderBy(dept => dept.Name)
            .ToArrayAsync();
        
        Employee = new Employee
        {
            DepartmentId = Departments.FirstOrDefault()?.Id
        };
    }

    private async Task HandleValidSubmit()
    {
        if (IsBusy)
        {
            return;
        }
        
        IsBusy = true;

        try
        {
            if (Employee is null)
            {
                return;
            }

            using var contextTask = ContextFactory.CreateDbContextAsync();
            var context = await contextTask;

            context.Employees.Add(Employee);
            await context.SaveChangesAsync();

            SuccessMessage = $"Employee {Employee.FirstName} {Employee.LastName} was added successfully";
            ErrorMessage = null;
            // New employee for next creation
            Employee = new Employee()
            {
                DepartmentId = Employee.DepartmentId
            };
        }
        catch (Exception exception)
        {
            SuccessMessage = null;
            ErrorMessage = $"Error while adding employee: {exception.Message}";
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        SuccessMessage = null;
        ErrorMessage = null;
    }

    private async Task HandleOnSubmit(bool isValid)
    {
        if (isValid)
        {
            await HandleValidSubmit();
        }
        else
        {
            HandleInvalidSubmit();
        }
    }

}