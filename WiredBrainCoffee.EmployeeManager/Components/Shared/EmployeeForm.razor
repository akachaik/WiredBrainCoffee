@using WiredBrainCoffee.EmployeeManager.Data.Models

<EditForm Model="@Employee"
          FormName="addEmployeeForm"
          OnValidSubmit="HandleValidSubmit"
          OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="mb-3">
        <label for="firstname" class="form-label">Firstname</label>
        <InputText id="firstname" class="form-control"
                   @bind-Value="Employee.FirstName"></InputText>
        <ValidationMessage For="() => Employee.FirstName"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label for="lastname" class="form-label">Lastname</label>
        <InputText id="lastname" class="form-control"
                   @bind-Value="Employee.LastName"></InputText>
        <ValidationMessage For="() => Employee.LastName"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label for="department" class="form-label">Department</label>
        <InputSelect id="department" class="form-select"
                     @bind-Value="Employee.DepartmentId">
            @if (Departments is not null)
            {
                foreach (var department in Departments)
                {
                    <option value="@department.Id">@department.Name</option>
                }
            }
        </InputSelect>
        <ValidationMessage For="() => Employee.IsDeveloper"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label for="isDeveloper" class="form-label">Is Developer:</label>
        <InputCheckbox id="isDeveloper" class="form-check-input"
                       @bind-Value="Employee.IsDeveloper"></InputCheckbox>
        <ValidationMessage For="() => Employee.IsDeveloper"></ValidationMessage>
    </div>

    @if (IsEdit)
    {
        <button type="submit" class="btn btn-primary mt-3" disabled="@IsBusy">Update</button>
        <button type="button" class="btn btn-outline-primary mt-3" disabled="@IsBusy" @onclick="HandleCancel" >Cancel</button>
        
    }
    else
    {
        <button type="submit" class="btn btn-primary mt-3" disabled="@IsBusy">Add</button>
    }
</EditForm>


@code {
    [Parameter]
    public Employee? Employee { get; set; }
    
    [Parameter]
    public Department[]? Departments { get; set; }
    
    [Parameter]
    public bool IsBusy { get; set; }
    
    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private async Task HandleValidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(true);
        }
    }

    private async Task HandleInvalidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(false);
        }
    }

    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }

}